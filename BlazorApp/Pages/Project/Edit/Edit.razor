@page "/projects/edit/{projectId:long}"
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager

<h1>Editar Projeto</h1>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Atualize as informações do projeto</h5>
        <EditForm Model="projectModel" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="title">Título do Projeto</label>
                <InputText Id="title" class="form-control" @bind-Value="projectModel.Title" />
                <ValidationMessage For="@(() => projectModel.Title)" />
            </div>

            <div class="form-group">
                <label for="creationDate">Data de Criação</label>
                <InputDate Id="creationDate" class="form-control" @bind-Value="projectModel.CreatedAt" />
                <ValidationMessage For="@(() => projectModel.CreatedAt)" />
            </div>

            <div class="form-group">
                <label for="completionDate">Data de Conclusão</label>
                <InputDate Id="completionDate" class="form-control" @bind-Value="projectModel.FinishedAt" />
                <ValidationMessage For="@(() => projectModel.FinishedAt)" />
            </div>

            <button type="submit" class="btn btn-primary">Salvar Alterações</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancelar</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public long projectId { get; set; }
    private ProjectModel projectModel = new ProjectModel();
    private ErrorConverter errorConverter = new ErrorConverter();
    private bool ShowErrors;
    private string Error = "";

    protected override async Task OnInitializedAsync()
    {
        var result = await ProjectService.GetProjectById(projectId);

        if (result != null)
        {
            projectModel.Title = result.Title;
            projectModel.CreatedAt = result.CreatedAt;
            projectModel.FinishedAt = result.FinishedAt.Value;
        }
        else
        {
            Error = errorConverter.MapError("GET_PROJECT_ERROR");
            ShowErrors = true;
        }
    }

    private async Task HandleSubmit()
    {
        ShowErrors = false;

        var result = await ProjectService.UpdateProject(projectId, projectModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/projects");
        }
        else
        {
            Error = errorConverter.MapError(result.Error);
            ShowErrors = true;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/projects");
    }
}
