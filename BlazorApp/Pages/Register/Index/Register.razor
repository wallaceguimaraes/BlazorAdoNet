@page "/register"
@inject IUserService UserService;
@inject NavigationManager NavigationManager;

<h1>Cadastro</h1>

@if (ShowErrors)
{
  <div class="alert alert-danger" role="alert">
   
      <p>@Error</p>
    
  </div>
}

<div class="card">
  <div class="card-body">
    <h5 class="card-title">Por favor informe seus dados</h5>
    <EditForm Model="registerModel" OnValidSubmit="HandleRegistration">
      <DataAnnotationsValidator />
      <ValidationSummary />

      <div class="form-group">
        <label for="email">Nome</label>
        <InputText Id="name" class="form-control" @bind-Value="registerModel.Name" />
        <ValidationMessage For="@(() => registerModel.Name)" />
      </div>

      <div class="form-group">
        <label for="email">Email</label>
        <InputText Id="email" class="form-control" @bind-Value="registerModel.Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
      </div>

      <div class="form-group mt-3">
        <label for="password">Senha</label>
        <InputText Id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
      </div>

      <button type="submit" class="btn btn-primary mt-3">Cadastrar</button>
    </EditForm>
  </div>
</div>

@code{
  private RegisterModel registerModel = new RegisterModel();
  private ErrorConverter errorConverter = new ErrorConverter();

    private bool ShowErrors;
    private string Error;

    private async Task HandleRegistration()
    {
        ShowErrors = false;
        var result = await UserService.Register(registerModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
          Error = errorConverter.MapError(result.Error);
          ShowErrors = true;
        }
    }
}

